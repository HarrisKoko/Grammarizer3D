global string $iterSlide;
global string $rulesSlider;
global string $outputCountSlide;
global string $minEdgeLengthSlide;
global string $maxEdgeLengthSlide;
global string $statusLabel1;
global string $statusLabel2;
global string $statusLabel3;

global proc openTxtFileBrowser(string $statusLabel) {
    string $filePathArray[] = `fileDialog2 -fileMode 1 -caption "Select a Json File" -fileFilter "Json Files (*.json)"`;
    if (size($filePathArray) > 0) {
        string $filePath = $filePathArray[0];
        string $result;
        int $status = catch($result = `LoadGrammarCmd $filePath`);
        if ($status == 0) {
            text -e -label "Grammar successfully loaded." -backgroundColor 0 0.5 0 $statusLabel;
        } else {
            text -e -label "Failed to load grammar." -backgroundColor 0.5 0 0 $statusLabel;
        }
    }
}


global proc onCancelPressed() {
    if (`window -exists myWindow`) {
        deleteUI myWindow;
    }
}

global proc loadObject() {
    print("Calling LoadMeshCmd...\n");
    string $result;
    int $status = catch($result = `LoadMeshCmd`);

    global string $statusLabel1;
    if ($status != 0) {
        print("LoadMeshCmd failed.\n");
        text -e -label "Failed to load object." -backgroundColor 0.5 0 0 $statusLabel1;
    } else {
        print("LoadMeshCmd result: " + $result + "\n");
        text -e -label "Object loaded successfully." -backgroundColor 0 0.5 0 $statusLabel1;
    }
}

global proc exportGrammar() {
    // Open a file save dialog to get folder and file name
    string $filePathArray[] = `fileDialog2 
        -fileMode 0 
        -caption "Save Grammar File"
        -fileFilter "JSON Files (*.json)"`;

    if (size($filePathArray) > 0) {
        string $filePath = $filePathArray[0];

        // Call the C++ command ExportGrammarCmd with the selected path
        string $result;
        int $status = catch($result = `ExportGrammarCmd $filePath`);

        if ($status == 0) {
            print("Grammar exported to: " + $filePath + "\n");
        } else {
            warning("Failed to export grammar to: " + $filePath);
        }
    }
}

global proc generateGrammar() {
    print("Calling GenerateGrammarCmd...\n");

    // Get the values from the sliders
    global string $iterSlide;
    global string $rulesSlide;
    int $iterationsValue = `intSliderGrp -q -value $iterSlide`;
    int $rulesValue = `intSliderGrp -q -value $rulesSlide`;

    // Print the values to the console for verification
    print("Slider value for iterations: " + $iterationsValue + "\n");
    print("Slider value for rules: " + $rulesValue + "\n");

    // Call the C++ command with the arguments
    string $result;
    int $status = catch(`GenerateGrammarCmd $rulesValue $iterationsValue`);

    global string $statusLabel2;
    if ($status != 0) {
        print("GenerateGrammarCmd failed.\n");
        text -e -label "Failed to generate grammar." -backgroundColor 0.5 0 0 $statusLabel2;
    } else {
        print("GenerateGrammarCmd succeeded.\n");
        text -e -label "Grammar generated successfully." -backgroundColor 0 0.5 0 $statusLabel2;
    }
}



global proc generateModels(){
    print("Calling GenerateModelsCmd...\n");
    string $result;
    int $status = catch($result = `GenerateModelsCmd`);

    global string $statusLabel3;
    if ($status != 0) {
        print("GenerateModelsCmd failed.\n");
        text -e -label "Failed to generate models." -backgroundColor 0.5 0 0 $statusLabel3;
    } else {
        print("GenerateGrammarCmd result: " + $result + "\n");
        text -e -label "Models generated successfully." -backgroundColor 0 0.5 0 $statusLabel3;
    }
}

global proc showMyWindow() {
    if (`window -exists myWindow`) {
        deleteUI myWindow;
    }

    window -title "Grammarizer Tool" myWindow;
    scrollLayout;
    columnLayout -adjustableColumn true;

    // Section 1: Load from Scene
    frameLayout -label "Option 1: Use Object from Scene" -collapsable true;
    columnLayout -adjustableColumn true;
    button -label "Select Object" -command "loadObject()" -ann "Select an object in the scene to build a grammar from.";
    global string $statusLabel1;
    $statusLabel1 = `text -label "Select a mesh and press select object"
        -backgroundColor 0.5 0.5 0.5
        -height 25 -align "center"`;


    global string $rulesSlide;
    $rulesSlide = `intSliderGrp -label "Rules" -field true
        -minValue 1 -maxValue 20 -value 1`;
    global string $iterSlide;
    $iterSlide = `intSliderGrp -label "Iterations" -field true
        -minValue 1 -maxValue 10 -value 1`;
        

    button -label "Generate Grammar" -command "generateGrammar()" -ann "Generate a grammar from the selected object.";
    global string $statusLabel2;
    $statusLabel2 = `text -label "Generate a grammar from selected mesh"
        -backgroundColor 0.5 0.5 0.5
        -height 25 -align "center"`;

    button -label "Export Grammar" -command "exportGrammar()" -ann "Export the grammar as a .json file.";
    setParent ..;
    setParent ..;

    // Section 2: Load from File
    frameLayout -label "Option 2: Load Existing Grammar File" -collapsable true;
    columnLayout -adjustableColumn true;
    global string $statusLabel3;
    $statusLabel3 = `text -label "Load an existing grammar"
        -backgroundColor 0.5 0.5 0.5
        -height 25 -align "center"`;
    button -label "Load Grammar" -command ("openTxtFileBrowser \"" + $statusLabel3 + "\"") -ann "Load a grammar text file.";
    setParent ..;
    setParent ..;

    // Generation Parameters
    frameLayout -label "Generation Settings" -collapsable true;
    columnLayout -adjustableColumn true;

    global string $outputCountSlide;
    $outputCountSlide = `intSliderGrp -label "Output Count" -field true
        -minValue 1 -maxValue 100 -value 10`;

    global string $minEdgeLengthSlide;
    $minEdgeLengthSlide = `floatSliderGrp -label "Min Edge Length" -field true
        -minValue 0.1 -maxValue 10.0 -value 1.0`;

    global string $maxEdgeLengthSlide;
    $maxEdgeLengthSlide = `floatSliderGrp -label "Max Edge Length" -field true
        -minValue 1.0 -maxValue 50.0 -value 10.0`;

    setParent ..;
    setParent ..;

    // Generation Button + Cancel
    rowLayout -numberOfColumns 2 -columnWidth2 150 150 -adjustableColumn 2;
    button -label "Generate Models" -command "generateModels()" -ann "Generate new models using the current grammar.";
    button -label "Cancel" -command "onCancelPressed()" -ann "Close the Grammarizer Tool window.";
    setParent ..;

    showWindow myWindow;
}

global string $gMainWindow;
if (`menu -exists myCustomMenu`) {
    deleteUI myCustomMenu;
}
menu -parent $gMainWindow -label "Grammarizer" myCustomMenu;
menuItem -label "Open Grammarizer Window" -command "showMyWindow();";

showMyWindow();