global string $iterSlide;
global string $outputCountSlide;
global string $minEdgeLengthSlide;
global string $maxEdgeLengthSlide;
global string $txtField;

global proc string readTxtFile(string $filePath) {
    int $fid = `fopen $filePath "r"`;
    string $fileContents = `fread $fid ""`;
    fclose $fid;
    return $fileContents;
}

global proc openTxtFileBrowser(string $txtField) {
    string $filePathArray[] = `fileDialog2 -fileMode 1 -caption "Select a Text File" -fileFilter "Text Files (*.txt)"`;
    if (size($filePathArray) > 0) {
        string $filePath = $filePathArray[0];
        string $fileContents = readTxtFile($filePath);
        if (size($fileContents) > 0) {
            textField -e -text "Grammar successfully loaded." $txtField;
        } else {
            textField -e -text "Failed to load grammar." $txtField;
        }
    }
}

global proc onGeneratePressed() {
    global string $iterSlide;
    global string $outputCountSlide;
    global string $minEdgeLengthSlide;
    global string $maxEdgeLengthSlide;
    global string $txtField;

    int $iters = `intSliderGrp -q -value $iterSlide`;
    int $outputCount = `intSliderGrp -q -value $outputCountSlide`;
    float $minEdgeLength = `floatSliderGrp -q -value $minEdgeLengthSlide`;
    float $maxEdgeLength = `floatSliderGrp -q -value $maxEdgeLengthSlide`;

    print("Params selected:\n");
    print("Iterations: " + $iters + "\n");
    print("Output Count: " + $outputCount + "\n");
    print("Min Edge Length: " + $minEdgeLength + "\n");
    print("Max Edge Length: " + $maxEdgeLength + "\n");

    textField -e -text "Ready to generate!" $txtField;
}

global proc onCancelPressed() {
    if (`window -exists myWindow`) {
        deleteUI myWindow;
    }
}

global proc loadObject() {
    print("Calling LoadMeshCmd...\n");

    string $result;
    int $status = catch($result = `LoadMeshCmd`);

    if ($status != 0) {
        print("LoadMeshCmd failed.\n");
        global string $txtField;
        textField -e -text "Failed to load object." $txtField;
    } else {
        print("LoadMeshCmd result: " + $result + "\n");
        global string $txtField;
        textField -e -text "Object loaded successfully." $txtField;
    }
}



global proc exportGrammar() {
    
}

global proc generateGrammar() {
    
}

global proc showMyWindow() {
    if (`window -exists myWindow`) {
        deleteUI myWindow;
    }

    window -title "Grammarizer Tool" myWindow;
    columnLayout -adjustableColumn true;

    button -label "Select Object" -command "loadObject()";
    global string $txtField;
    $txtField = `textField -editable false -width 300 -height 50`;

    button -label "Generate Grammar" -command "generateGrammar()";
    button -label "Load Grammar" -command ("openTxtFileBrowser \"" + $txtField + "\"");
    button -label "Export Grammar" -command "exportGrammar()";

    global string $iterSlide;
    $iterSlide = `intSliderGrp -label "Iterations" -field true
        -minValue 1 -maxValue 10
        -fieldMinValue -1 -fieldMaxValue 10
        -value 1`;

    global string $outputCountSlide;
    $outputCountSlide = `intSliderGrp -label "Output Count" -field true
        -minValue 1 -maxValue 100
        -fieldMinValue -1 -fieldMaxValue 100
        -value 10`;

    global string $minEdgeLengthSlide;
    $minEdgeLengthSlide = `floatSliderGrp -label "Min Edge Length" -field true
        -minValue 0.1 -maxValue 10.0
        -fieldMinValue 0.0 -fieldMaxValue 10.0
        -value 1.0`;

    global string $maxEdgeLengthSlide;
    $maxEdgeLengthSlide = `floatSliderGrp -label "Max Edge Length" -field true
        -minValue 1.0 -maxValue 50.0
        -fieldMinValue 0.0 -fieldMaxValue 50.0
        -value 10.0`;

    button -label "Generate Models" -command "onGeneratePressed()";
    button -label "Cancel" -command "onCancelPressed()";

    showWindow myWindow;
}

global string $gMainWindow;
if (`menu -exists myCustomMenu`) {
    deleteUI myCustomMenu;
}
menu -parent $gMainWindow -label "Grammarizer" myCustomMenu;
menuItem -label "Open Grammarizer Window" -command "showMyWindow();";

showMyWindow();
